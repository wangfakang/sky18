{"name":"Sky18","tagline":"nginx optimize [相关简单的nginx长连接测试配置以及调优]","body":"`nginx相关优化与高并发测试:`\r\n  \r\n  前两天被问到的一个问题,下面就简单的整理下,注:nginx的相关配置优化只是部分可以自己扩充:   \r\n\r\n1.如何测试nginx百万级活跃长连接?\r\n=====    \r\n   首先需要和server端保持百万级的长连接,那么就需要有百万的client,那么现在的问题就是client这么多[资源有限],\r\n   该如何做恩?\r\n   \r\n   * 方案一:   \r\n       要是资源足够充足,那就很好解决.----端口是16位两字节(最大表示:65535,但是0到1023之间的是不可以使用的\r\n      [系统预留的],那就剩下1024到65535共计:64511个,也就是一台机器可以有6万个左右client),所以100万长连接的\r\n      时候大概就需要16台机器.\r\n   * 方案二:    \r\n       可以使用docker,docker默认启动的时候使用的网络模式就是bridge,其docker产生的各个容器之间的网络资源是\r\n       隔离,属于自己的命名空间内部,所以可以启动16个docker就完美解决了.\r\n\r\n  ## 注意:  \r\n    * 1.系统默认的分配port是有限制的,在查看默认如下:\r\n    ```\r\n    fakang@fakang-pc:~/wangfakang$sysctl  -a | grep  \"net.ipv4.ip_local_port_range\"\r\n    net.ipv4.ip_local_port_range = 32768    61000\r\n    所以要进行重新设置.\r\n    ```\r\n    * 2.client需要打开很多的文件描述符,所以应该设置当前系统能打开最大文件描述个数.\r\n    ```\r\n    通过:fakang@fakang-pc:~/wangfakang/ctest$ ulimit -n\r\n         1024\r\n    默认是只运行打开1024个文件描述符.\r\n    方法1:ulimit Cn 1000000   //重启设置失效\r\n    方法2:在/etc/security/limits.conf 最后增加：\r\n\r\n        soft nofile 1000000  //硬设置\r\n        hard nofile 1000000  //软设置\r\n    ```\r\n\r\n\r\n\r\n\r\n\r\n2.nginx的高并发的相关优化?\r\n======\r\n\r\n nginx做高并发的时候可以从以下几方面做优化:\r\n     \r\n * 1.tcp层面上的参数设置:\r\n     \r\n          通常tcp相关的设置文件位于:  /etc/sysctl.conf\r\n            ```\r\n            net.ipv4.tcp_timestamps = 0      //此参数和tcp_tw_recycle参数同时打开会激活这种现象[可以缓存每个连接最新的时间戳，\r\n            后续请求中如果时间戳小于缓存的时间戳，即视为无效，相应的数据包会被丢弃。]此种现象会大致在使用LVS(NAT模式下)的时候会造成\r\n            client明明发送了SYN包但是就收不到server端的ACK,被丢弃了. 一般会造成nginx出现504错误.\r\n            net.ipv4.tcp_synack_retries = 1  //ack包重试次数\r\n            net.ipv4.tcp_syn_retries = 1     //syn包重试次数\r\n            net.ipv4.tcp_tw_recycle = 1 \r\n            net.ipv4.tcp_tw_reuse = 1        //运行socket fd处于time_wait进行使用.\r\n            net.ipv4.tcp_mem = 94500000 915000000 927000000\r\n            net.ipv4.tcp_fin_timeout = 1     //TCP保持在FIN_WAIT_2状态的时间.\r\n            net.ipv4.tcp_keepalive_time = 30 //尝试验证空闲连接是否完好的频率.\r\n            net.ipv4.ip_local_port_range = 1024 65000   //根据需求设置本地允许打开使用的port范围.\r\n          ```\r\n         最后设置好了,可以通过: /sbin/sysctl -p  命令进行生效.    \r\n      \r\n* 2.nginx相关配置参数设置:\r\n      ```\r\n        最好使用epoll.\r\n        worker  当前nginx启动的worker个数.\r\n        worker_connections 每个worker处理的最大连接数.\r\n     \r\n        upstream中可以设置: keepalive_timeout keepalive参数.\r\n        等等\r\n\r\n      ```\r\n\r\n\r\n\r\nCommunite  \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/fakangwang)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n","google":"nginx optimize [相关简单的nginx长连接测试配置以及调优]","note":"Don't delete this file! It's used internally to help with page regeneration."}